(()=>{"use strict";const t=new class{constructor(t){this.boardContainer=t}create(){for(let t=0;t<8;t++)for(let i=0;i<8;i++){const s=document.createElement("div");let e;s.classList.add("board-cell"),e=i%2==0?"bright":"dark",t%2==1&&(e="bright"===e?"dark":"bright"),s.classList.add(e),this.boardContainer.appendChild(s)}}}(document.querySelector(".chess-board")),i=new class{constructor(t){this._positions=[],this.ANIM_STEP_DURATION=500,this.knight=t}putTo(t){const[i,s]=t;let e=`top: ${87.5-12.5*s}%; left: ${12.5*i}%`;this.knight.setAttribute("style",e),this.knight.setAttribute("data-pos",JSON.stringify(t))}moveTo(t){const i=t[0],s=JSON.parse(this.knight.getAttribute("data-pos"))[1];setTimeout((()=>this.putTo([i,s])),0),setTimeout((()=>this.putTo(t)),this.ANIM_STEP_DURATION)}animate(){let t=0;this.animationID=setInterval((()=>{t===this._positions.length&&(t=0,this.knight.classList.remove("animate")),1===t&&this.knight.classList.add("animate");const i=this._positions[t];0===t?this.putTo(i):this.moveTo(i),t++}),3*this.ANIM_STEP_DURATION)}stopAnimation(){this.animationID&&clearInterval(this.animationID)}set positions(t){this._positions=t}}(document.querySelector(".knight"));class s{constructor(t,i){this.value=[t,i]}isValid(){const[t,i]=this.value;return t>=0&&t<=7&&i>=0&&i<=7}isEqual(t){return this.value[0]===t.value[0]&&this.value[1]===t.value[1]}inc(t){const[i,e]=this.value,[n,o]=t;return new s(i+n,e+o)}}class e{constructor(t){this.POS_INCREMENTS=[[1,2],[2,1],[-1,2],[-2,1],[1,-2],[2,-1],[-1,-2],[-2,-1]],this.foundPositions=[],this.root={parent:null,position:t,children:[]}}_isFound(t){return-1!==this.foundPositions.findIndex((i=>i.isEqual(t)))||(this.foundPositions.push(t),!1)}_find(t,i){if(i.position.isEqual(t))return i;if(0===i.children.length)return null;{let s=null,e=0;for(;!s&&e<i.children.length;)s=s||this._find(t,i.children[e]),e++;return s}}find(t){return this._find(t,this.root)}_buildTree(t){const i=this.POS_INCREMENTS.map((i=>t.position.inc(i))).filter((t=>t.isValid())).filter((t=>!this._isFound(t)));return t.children=i.map((i=>({parent:t,position:i,children:[]}))),t}buildTree(){const t=[[this.root]];for(;t.length>0;){const i=[];t.shift().map((t=>this._buildTree(t))).forEach((t=>{t.children.forEach((t=>{i.push(t)}))})),i.length>0&&t.push(i)}return this.root}findShortestPathTo(t){const i=[];let s=this.find(t);for(;s;)i.push(s.position.value),s=s.parent;let e=[];for(;i.length>0;)e.push(i.pop());return e}}t.create(),i.positions=[[0,0]],i.animate();const n=document.querySelector(".form-container"),o=document.querySelector("#btn-swap"),r=document.querySelector("#shortest-path");o.addEventListener("click",(function(){"Form"===o.textContent?(o.textContent="Chess",t.boardContainer.classList.add("spin-out")):(o.textContent="Form",n.classList.add("spin-out")),setTimeout((()=>{n.classList.toggle("invisible"),t.boardContainer.classList.toggle("invisible")}),500),setTimeout((()=>{n.classList.contains("invisible")?t.boardContainer.classList.remove("spin-out"):n.classList.remove("spin-out")}),520)}));const a=document.querySelector("form");a.addEventListener("submit",(function(t){const n=["a","b","c","d","e","f","g","h"];t.preventDefault(),i.stopAnimation();const o=a.elements,h=["start-x","start-y","end-x","end-y"].map((t=>+o.namedItem(t).value)),l=new s(h[0],h[1]),c=new e(l),u=new s(h[2],h[3]);c.buildTree();const d=c.findShortestPathTo(u);i.positions=d,i.animate(),r.innerHTML="Shortest Path: <br>",d.forEach(((t,i)=>{r.innerHTML+=`${i}. ${n[t[0]]}${t[1]+1} <br>`}))}))})();