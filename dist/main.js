(()=>{"use strict";const t=new class{constructor(t){this.boardContainer=t}create(){for(let t=0;t<8;t++)for(let s=0;s<8;s++){const i=document.createElement("div");let e;i.classList.add("board-cell"),e=s%2==0?"bright":"dark",t%2==1&&(e="bright"===e?"dark":"bright"),i.classList.add(e),this.boardContainer.appendChild(i)}}}(document.querySelector(".chess-board")),s=new class{constructor(t){this._positions=[],this.ANIM_STEP_DURATION=500,this.knight=t}putTo(t){const[s,i]=t;let e=`top: ${87.5-12.5*i}%; left: ${12.5*s}%`;this.knight.setAttribute("style",e),this.knight.setAttribute("data-pos",JSON.stringify(t))}moveTo(t){const s=t[0],i=JSON.parse(this.knight.getAttribute("data-pos"))[1];setTimeout((()=>this.putTo([s,i])),0),setTimeout((()=>this.putTo(t)),this.ANIM_STEP_DURATION)}animate(){let t=0;this.animationID=setInterval((()=>{t===this._positions.length&&(t=0,this.knight.classList.remove("animate")),1===t&&this.knight.classList.add("animate");const s=this._positions[t];0===t?this.putTo(s):this.moveTo(s),t++}),3*this.ANIM_STEP_DURATION)}stopAnimation(){this.animationID&&clearInterval(this.animationID)}set positions(t){this._positions=t}}(document.querySelector(".knight"));class i{constructor(t,s){this.value=[t,s]}isValid(){const[t,s]=this.value;return t>=0&&t<=7&&s>=0&&s<=7}isEqual(t){return this.value[0]===t.value[0]&&this.value[1]===t.value[1]}inc(t){const[s,e]=this.value,[n,o]=t;return new i(s+n,e+o)}}class e{constructor(t){this.POS_INCREMENTS=[[1,2],[2,1],[-1,2],[-2,1],[1,-2],[2,-1],[-1,-2],[-2,-1]],this.foundPositions=[],this.root={parent:null,position:t,children:[]}}_isFound(t){return-1!==this.foundPositions.findIndex((s=>s.isEqual(t)))||(this.foundPositions.push(t),!1)}_find(t,s){if(s.position.isEqual(t))return s;if(0===s.children.length)return null;{let i=null,e=0;for(;!i&&e<s.children.length;)i=i||this._find(t,s.children[e]),e++;return i}}find(t){return this._find(t,this.root)}_buildTree(t){const s=this.POS_INCREMENTS.map((s=>t.position.inc(s))).filter((t=>t.isValid())).filter((t=>!this._isFound(t)));return t.children=s.map((s=>({parent:t,position:s,children:[]}))),t}buildTree(){const t=[[this.root]];for(;t.length>0;){const s=[];t.shift().map((t=>this._buildTree(t))).forEach((t=>{t.children.forEach((t=>{s.push(t)}))})),s.length>0&&t.push(s)}return this.root}findShortestPathTo(t){const s=[];let i=this.find(t);for(;i;)s.push(i.position.value),i=i.parent;let e=[];for(;s.length>0;)e.push(s.pop());return e}}t.create(),s.positions=[[0,0]],s.animate();const n=document.querySelector(".form-container"),o=document.querySelector("#btn-swap"),r=document.querySelector("#shortest-path");o.addEventListener("click",(function(){"Form"===o.textContent?(o.textContent="Chess",t.boardContainer.classList.add("spin-out")):(o.textContent="Form",n.classList.add("spin-out")),setTimeout((()=>{n.classList.toggle("invisible"),t.boardContainer.classList.toggle("invisible")}),500),setTimeout((()=>{n.classList.contains("invisible")?t.boardContainer.classList.remove("spin-out"):n.classList.remove("spin-out")}),520)}));const a=document.querySelector("form");a.addEventListener("submit",(function(t){const n=["a","b","c","d","e","f","g","h"];t.preventDefault(),s.stopAnimation();const o=function(){const t=a.elements,s=["start-x","start-y","end-x","end-y"].map((s=>+t.namedItem(s).value));return{start:new i(s[0],s[1]),end:new i(s[2],s[3])}}(),h=new e(o.start);h.buildTree();const l=h.findShortestPathTo(o.end);s.positions=l,s.animate(),r.innerHTML="Shortest Path: <br>",l.forEach(((t,s)=>{r.innerHTML+=`${s}. ${n[t[0]]}${t[1]+1} <br>`}))}))})();